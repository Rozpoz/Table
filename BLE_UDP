var noble = require('noble');

var canRead = false;
var net = require('net');
var PORT = 7002;
var HOST = '127.0.0.1'; 
//Communication...
var device1 = "***";
var device2 = "***";
var device3 = "***";
var device4 = "***";
var device6 = "***";
var device7 = "**";
var gRead = 0;
var fRead = 0;
var dRead = 0;
var cRead = 0;
var bRead = 0;
var aRead = 0;




var dgram = require('dgram');
var client = dgram.createSocket('udp4');





//Scan for bluetooth devices 
noble.on('stateChange', function(state) {
    if (state === 'poweredOn') {
        noble.startScanning();
        console.log('startScanning');
    } else {
        noble.stopScanning();
        console.log('stopScanning');
    }
});


///Device 1
noble.on('discover', function(peripheral) {
    ///
    if (peripheral.uuid == device1) {
        console.log('Found device with local name: ' + peripheral.advertisement.localName);
        peripheral.connect(function(error) {
            console.log('connected to peripheral: ' + peripheral.uuid);
            peripheral.discoverServices(null, function(error, services) {
                var deviceInformationService = services[3];
                deviceInformationService.discoverCharacteristics(null, function(error, characteristics) {
                    var charValue = characteristics[0];

                    charValue.on('read', function(data, isNotification) {
                        aRead = data[0];
                     //   console.log("a read = " + aRead);
                    });
                    charValue.notify(true, function(error) {

                    });


                });

            })
        });
    };

    if (peripheral.uuid == device2) {
        console.log('Found device with local name: ' + peripheral.advertisement.localName);
        peripheral.connect(function(error) {
            console.log('connected to peripheral: ' + peripheral.uuid);
            peripheral.discoverServices(null, function(error, services) {
                var deviceInformationService = services[3];
                deviceInformationService.discoverCharacteristics(null, function(error, characteristics) {
                    var charValue = characteristics[0];

                    charValue.on('read', function(data, isNotification) {
                        bRead = data[0];
                        //  console.log(bRead);
                    });
                    charValue.notify(true, function(error) {

                    });


                });

            })
        });
    };

    if (peripheral.uuid == device3) {
        console.log('Found device with local name: ' + peripheral.advertisement.localName);
        peripheral.connect(function(error) {
            console.log('connected to peripheral: ' + peripheral.uuid);
            peripheral.discoverServices(null, function(error, services) {
                var deviceInformationService = services[3];
                deviceInformationService.discoverCharacteristics(null, function(error, characteristics) {
                    var charValue = characteristics[0];

                    charValue.on('read', function(data, isNotification) {
                        cRead = data[0];
                        // console.log("c = " + cRead);
                    });
                    charValue.notify(true, function(error) {

                    });


                });

            })
        });
    };
    if (peripheral.uuid == device4) {
        console.log('Found device with local name: ' + peripheral.advertisement.localName);
        peripheral.connect(function(error) {
            console.log('connected to peripheral: ' + peripheral.uuid);
            peripheral.discoverServices(null, function(error, services) {
                var deviceInformationService = services[3];
                deviceInformationService.discoverCharacteristics(null, function(error, characteristics) {
                    var charValue = characteristics[0];

                    charValue.on('read', function(data, isNotification) {
                        dRead = data[0];
                        //    console.log("d= " + dRead);
                    });
                    charValue.notify(true, function(error) {

                    });


                });

            })
        });
    };
    /// ENTIRE NOBLE
    if (peripheral.uuid == device6) {
        console.log('Found device with local name: ' + peripheral.advertisement.localName);
        peripheral.connect(function(error) {
            console.log('connected to peripheral: ' + peripheral.uuid);
            peripheral.discoverServices(null, function(error, services) {
                var deviceInformationService = services[3];
                deviceInformationService.discoverCharacteristics(null, function(error, characteristics) {
                    var charValue = characteristics[0];

                    charValue.on('read', function(data, isNotification) {
                        fRead = data[0];
                        //    console.log("d= " + dRead);
                    });
                    charValue.notify(true, function(error) {

                    });


                });

            })
        });
    };
    /// ENTIRE NOBLE    
    if (peripheral.uuid == device7) {
        console.log('Found device with local name: ' + peripheral.advertisement.localName);
        peripheral.connect(function(error) {
            console.log('connected to peripheral: ' + peripheral.uuid);
            peripheral.discoverServices(null, function(error, services) {
                var deviceInformationService = services[3];
                deviceInformationService.discoverCharacteristics(null, function(error, characteristics) {
                    var charValue = characteristics[0];

                    charValue.on('read', function(data, isNotification) {
                        gRead = data[0];
                      //  console.log("d= " + dRead);
                    });
                    charValue.notify(true, function(error) {

                    });


                });

            })
        });
    };
    /// ENTIRE NOBLE        
});





setInterval(function() {

 
//console.log(cRead);
   var message = aRead + " " + bRead + " " + cRead + " " + dRead + " " + fRead + " " + gRead;
    console.log(message);
    var sMessage = JSON.stringify(message);

    client.send(message, 0, message.length, PORT, HOST, function(err, bytes) {

    });
}, 5);
